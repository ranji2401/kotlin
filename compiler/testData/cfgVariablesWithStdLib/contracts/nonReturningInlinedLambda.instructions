== myRun ==
inline fun myRun(block: () -> Unit): Unit {
    contract {
        callsInPlace(block, InvocationKind.EXACTLY_ONCE)
    }
    return block()
}
---------------------
L0:
  1 <START>                                                                                       INIT: in: {} out: {}
    v(block: () -> Unit)                                                                          INIT: in: {} out: {block=D}
    magic[FAKE_INITIALIZER](block: () -> Unit) -> <v0>                                            INIT: in: {block=D} out: {block=D}
    w(block|<v0>)                                                                                 INIT: in: {block=D} out: {block=ID}
  2 mark({ contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) } return block() })        INIT: in: {block=ID} out: {block=ID}
    mark({ callsInPlace(block, InvocationKind.EXACTLY_ONCE) })
    jmp?(L2)
    d({ callsInPlace(block, InvocationKind.EXACTLY_ONCE) })                                       INIT: in: {block=I} out: {block=I}      USE: in: {EXACTLY_ONCE=READ, block=READ} out: {EXACTLY_ONCE=READ, block=READ}
L2 [after local declaration]:
    r({ callsInPlace(block, InvocationKind.EXACTLY_ONCE) }) -> <v1>                               INIT: in: {block=ID} out: {block=ID}
    mark(contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) })
    call(contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }, contract|<v1>) -> <v2>                                            USE: in: {block=READ} out: {block=READ}
    r(block) -> <v3>                                                                                                                      USE: in: {} out: {block=READ}
    mark(block())
    call(block(), invoke|<v3>) -> <v4>
    ret(*|<v4>) L1
L1:
  1 <END>
error:
    <ERROR>                                                                                       INIT: in: {} out: {}
sink:
    <SINK>                                                                                        INIT: in: {block=I?} out: {block=I?}    USE: in: {} out: {}
=====================
== anonymous_0 ==
{
        callsInPlace(block, InvocationKind.EXACTLY_ONCE)
    }
---------------------
L3:
  3 <START>                                                                                          INIT: in: {block=ID} out: {block=ID}
  4 mark(callsInPlace(block, InvocationKind.EXACTLY_ONCE))
    magic[IMPLICIT_RECEIVER](callsInPlace(block, InvocationKind.EXACTLY_ONCE)) -> <v0>                                                       USE: in: {EXACTLY_ONCE=READ, block=READ} out: {EXACTLY_ONCE=READ, block=READ}
    r(block) -> <v1>                                                                                                                         USE: in: {EXACTLY_ONCE=READ} out: {EXACTLY_ONCE=READ, block=READ}
    mark(InvocationKind.EXACTLY_ONCE)                                                                                                        USE: in: {EXACTLY_ONCE=READ} out: {EXACTLY_ONCE=READ}
    r(EXACTLY_ONCE) -> <v2>                                                                                                                  USE: in: {} out: {EXACTLY_ONCE=READ}
    mark(callsInPlace(block, InvocationKind.EXACTLY_ONCE))
    call(callsInPlace(block, InvocationKind.EXACTLY_ONCE), callsInPlace|<v0>, <v1>, <v2>) -> <v3>
L4:
  3 <END>
error:
    <ERROR>                                                                                          INIT: in: {} out: {}
sink:
    <SINK>                                                                                           INIT: in: {block=I} out: {block=I}      USE: in: {} out: {}
=====================
== getBool ==
fun getBool(): Boolean = false
---------------------
L0:
  1 <START>             INIT: in: {} out: {}
    r(false) -> <v0>
    ret(*|<v0>) L1
L1:
    <END>
error:
    <ERROR>
sink:
    <SINK>                                      USE: in: {} out: {}
=====================
== withLabeledReturn ==
fun withLabeledReturn(y: Int) {
    val x = myRun outer@ {
        myRun { return@outer Unit }
        println(y)
    }

    println(y)
    println(x)
}
---------------------
L0:
  1 <START>                                                                                            INIT: in: {} out: {}
    v(y: Int)                                                                                          INIT: in: {} out: {y=D}
    magic[FAKE_INITIALIZER](y: Int) -> <v0>                                                            INIT: in: {y=D} out: {y=D}
    w(y|<v0>)                                                                                          INIT: in: {y=D} out: {y=ID}                 USE: in: {Unit=READ, y=READ} out: {Unit=READ, y=READ}
  2 mark({ val x = myRun outer@ { myRun { return@outer Unit } println(y) } println(y) println(x) })    INIT: in: {y=ID} out: {y=ID}
    v(val x = myRun outer@ { myRun { return@outer Unit } println(y) })                                 INIT: in: {y=ID} out: {x=D, y=ID}
    mark(outer@ { myRun { return@outer Unit } println(y) })                                            INIT: in: {x=D, y=ID} out: {x=D, y=ID}
    mark({ myRun { return@outer Unit } println(y) })
    r({ myRun { return@outer Unit } println(y) }) -> <v1>
    mark(myRun outer@ { myRun { return@outer Unit } println(y) })
    call(myRun outer@ { myRun { return@outer Unit } println(y) }, myRun|<v1>) -> <v2>
L2 [before inlined declaration]:
    inlined({ myRun { return@outer Unit } println(y) })                                                                                            USE: in: {Unit=READ, x=READ, y=READ} out: {Unit=READ, x=READ, y=READ}
L3 [after inlined declaration]:
    w(x|<v2>)                                                                                          INIT: in: {x=D, y=ID} out: {x=ID, y=ID}     USE: in: {x=READ, y=READ} out: {x=READ, y=READ}
    r(y) -> <v3>                                                                                       INIT: in: {x=ID, y=ID} out: {x=ID, y=ID}    USE: in: {x=READ} out: {x=READ, y=READ}
    mark(println(y))
    call(println(y), println|<v3>) -> <v4>                                                                                                         USE: in: {x=READ} out: {x=READ}
    r(x) -> <v5>                                                                                                                                   USE: in: {} out: {x=READ}
    mark(println(x))
    call(println(x), println|<v5>) -> <v6>
L1:
  1 <END>                                                                                              INIT: in: {y=ID} out: {y=ID}
error:
    <ERROR>                                                                                            INIT: in: {} out: {}
sink:
    <SINK>                                                                                             INIT: in: {y=I?} out: {y=I?}                USE: in: {} out: {}
=====================
== inlined anonymous_1 ==
{
        myRun { return@outer Unit }
        println(y)
    }
---------------------
L4:
  3 <START>                                                  INIT: in: {x=D, y=ID} out: {x=D, y=ID}
  4 mark(myRun { return@outer Unit } println(y))
    mark({ return@outer Unit })
    r({ return@outer Unit }) -> <v0>
    mark(myRun { return@outer Unit })
    call(myRun { return@outer Unit }, myRun|<v0>) -> <v1>
L6 [before inlined declaration]:
    inlined({ return@outer Unit })                                                                     USE: in: {Unit=READ, x=READ, y=READ} out: {Unit=READ, x=READ, y=READ}
L7 [after inlined declaration]:
-   r(y) -> <v2>
-   mark(println(y))
-   call(println(y), println|<v2>) -> <v3>
L5:
  3 <END>                                                    INIT: in: {x=D, y=ID} out: {x=D, y=ID}    USE: in: {x=READ, y=READ} out: {x=READ, y=READ}
error:
-   <ERROR>
sink:
    <SINK>                                                   INIT: in: {x=D, y=ID} out: {x=D, y=ID}    USE: in: {x=READ, y=READ} out: {x=READ, y=READ}
=====================
== inlined anonymous_2 ==
{ return@outer Unit }
---------------------
L8:
  5 <START>                    INIT: in: {x=D, y=ID} out: {x=D, y=ID}
  6 mark(return@outer Unit)                                              USE: in: {Unit=READ, x=READ, y=READ} out: {Unit=READ, x=READ, y=READ}
    r(Unit) -> <v0>                                                      USE: in: {x=READ, y=READ} out: {Unit=READ, x=READ, y=READ}
    ret(*|<v0>) L5                                                       USE: in: {x=READ, y=READ} out: {x=READ, y=READ}
L9:
- 5 <END>
error:
-   <ERROR>
sink:
-   <SINK>                                                               USE: in: {x=READ, y=READ} out: {x=READ, y=READ}
=====================
