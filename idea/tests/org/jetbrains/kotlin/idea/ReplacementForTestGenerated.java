/*
 * Copyright 2010-2017 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.kotlin.idea;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("idea/testData/replacementFor")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class ReplacementForTestGenerated extends AbstractReplacementForTest {
    public void testAllFilesPresentInReplacementFor() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/replacementFor"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
    }

    @TestMetadata("CheckMatchedArgumentTypes.kt")
    public void testCheckMatchedArgumentTypes() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/replacementFor/CheckMatchedArgumentTypes.kt");
        doTest(fileName);
    }

    @TestMetadata("CheckMatchedArgumentTypes2.kt")
    public void testCheckMatchedArgumentTypes2() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/replacementFor/CheckMatchedArgumentTypes2.kt");
        doTest(fileName);
    }

    @TestMetadata("DispatchReceivers.kt")
    public void testDispatchReceivers() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/replacementFor/DispatchReceivers.kt");
        doTest(fileName);
    }

    @TestMetadata("ExtensionReceivers.kt")
    public void testExtensionReceivers() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/replacementFor/ExtensionReceivers.kt");
        doTest(fileName);
    }

    @TestMetadata("ExtensionReceivers2.kt")
    public void testExtensionReceivers2() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/replacementFor/ExtensionReceivers2.kt");
        doTest(fileName);
    }

    @TestMetadata("FqNameInCode.kt")
    public void testFqNameInCode() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/replacementFor/FqNameInCode.kt");
        doTest(fileName);
    }

    @TestMetadata("FqNameInPattern.kt")
    public void testFqNameInPattern() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/replacementFor/FqNameInPattern.kt");
        doTest(fileName);
    }

    @TestMetadata("FunctionFqNameInPattern.kt")
    public void testFunctionFqNameInPattern() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/replacementFor/FunctionFqNameInPattern.kt");
        doTest(fileName);
    }

    @TestMetadata("JavaStaticMethodWrapper.kt")
    public void testJavaStaticMethodWrapper() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/replacementFor/JavaStaticMethodWrapper.kt");
        doTest(fileName);
    }

    @TestMetadata("MultiplePlacesMatch.kt")
    public void testMultiplePlacesMatch() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/replacementFor/MultiplePlacesMatch.kt");
        doTest(fileName);
    }

    @TestMetadata("OptionalParams.kt")
    public void testOptionalParams() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/replacementFor/OptionalParams.kt");
        doTest(fileName);
    }

    @TestMetadata("OtherFunction.kt")
    public void testOtherFunction() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/replacementFor/OtherFunction.kt");
        doTest(fileName);
    }

    @TestMetadata("RedundantThisReceivers.kt")
    public void testRedundantThisReceivers() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/replacementFor/RedundantThisReceivers.kt");
        doTest(fileName);
    }

    @TestMetadata("Simple.kt")
    public void testSimple() throws Exception {
        String fileName = KotlinTestUtils.navigationMetadata("idea/testData/replacementFor/Simple.kt");
        doTest(fileName);
    }

    @TestMetadata("idea/testData/replacementFor/stdlib")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Stdlib extends AbstractReplacementForTest {
        public void testAllFilesPresentInStdlib() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/replacementFor/stdlib"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("CreateTempFile.kt")
        public void testCreateTempFile() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("idea/testData/replacementFor/stdlib/CreateTempFile.kt");
            doTest(fileName);
        }

        @TestMetadata("SystemOutPrint.kt")
        public void testSystemOutPrint() throws Exception {
            String fileName = KotlinTestUtils.navigationMetadata("idea/testData/replacementFor/stdlib/SystemOutPrint.kt");
            doTest(fileName);
        }
    }
}
